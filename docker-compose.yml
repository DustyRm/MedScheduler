version: "3.9"

x-postgres-env: &postgres-env
  POSTGRES_USER: ${DB_USER:-postgres}
  POSTGRES_PASSWORD: ${DB_PASS:-postgres}
  POSTGRES_DB: ${DB_NAME:-medscheduler}

services:
  postgres:
    image: postgres:16
    environment: *postgres-env
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  migration:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    working_dir: /src/MedScheduler.Api
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/src
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ConnectionStrings__Postgres: "Host=postgres;Port=5432;Database=${DB_NAME:-medscheduler};Username=${DB_USER:-postgres};Password=${DB_PASS:-postgres}"
      Jwt__Key: ${JWT_KEY:-DEV_SUPER_SECRET_CHANGE_ME_32BYTES_MINIMUM_1234567890}
      Jwt__Issuer: ${JWT_ISSUER:-medscheduler}
      Jwt__Audience: ${JWT_AUDIENCE:-medscheduler-clients}
    command: ["bash","-lc","set -e; dotnet restore; dotnet tool restore; dotnet ef database update --project ./MedScheduler.Api.csproj --startup-project ./MedScheduler.Api.csproj"]
    restart: "no"

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    working_dir: /src/MedScheduler.Api
    depends_on:
      migration:
        condition: service_completed_successfully
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Postgres: "Host=postgres;Port=5432;Database=${DB_NAME:-medscheduler};Username=${DB_USER:-postgres};Password=${DB_PASS:-postgres}"
      Jwt__Key: ${JWT_KEY:-DEV_SUPER_SECRET_CHANGE_ME_32BYTES_MINIMUM_1234567890}
      Jwt__Issuer: ${JWT_ISSUER:-medscheduler}
      Jwt__Audience: ${JWT_AUDIENCE:-medscheduler-clients}
      DOTNET_USE_POLLING_FILE_WATCHER: "1"
      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: "1"
      OPENAI_API_KEY: ${OPENAI_API_KEY}              
      Triagem__Provider: ${TRIAGEM_PROVIDER:-openai} 
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./backend/MedScheduler.Api:/src/MedScheduler.Api
      - aspnet_keys:/root/.aspnet/DataProtection-Keys
      - nuget:/root/.nuget/packages
    restart: unless-stopped

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    depends_on:
      api:
        condition: service_started
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:8080}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    restart: unless-stopped

volumes:
  pgdata:
  aspnet_keys:
  nuget:
  node_modules:
